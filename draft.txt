利润：price[i] - price[j]   第i天卖出  第j天买入
f(x)表示在第x天卖出时的最大利润
f(x) = f(x - 1) + price[x] - price[x - 1]
边界状态
f(0) = 0
f(1) = 1

删除0个：ahbgdc
删除0个：dp[0][0]

删除1个：hbgdc,abgdc,ahgdc,ahbdc,ahbgc,ahbgd
删除1个：dp[1][0],dp[1][1],dp[1][2],dp[1][3]，dp[1][4]，dp[1][5]
删除1个：dp[0][0].delete1,dp[0][0].delete2,dp[0][0].delete3,dp[0][0].delete4,dp[0][0].delete5,dp[0][0].delete6

删除2个：bgdc,hgdc,hbdc,hbgc,hbgd
删除2个：agdc,abdc,abgc,abgd
删除2个：ahdc,ahgc,ahgd
删除2个：ahbc,ahbd
删除2个：ahbg

删除2个：dp[1][0].delete1,dp[1][0].delete2,dp[1][0].delete3,dp[1][0].delete4,dp[1][0].delete5
删除2个：dp[1][1].delete2,dp[1][1].delete3,dp[1][1].delete4,dp[1][1].delete5
删除2个：dp[1][2].delete3,dp[1][2].delete4,dp[1][2].delete5
删除2个：dp[1][3].delete4,dp[1][3].delete5
删除2个：dp[1][4].delete5

删除2个：dp[2][0],dp[2][1],dp[2][2],dp[2][3],dp[2][4]
删除2个：dp[2][5],dp[2][6],dp[2][7],dp[2][8]
删除2个：dp[2][9],dp[2][10],dp[2][11]
删除2个：dp[2][12],dp[2][13]
删除2个：dp[2][14]

删除3个：gdc,bdc,bgc,bgd,gdc,hdc,hgc,hgd,bdc,hdc,hbc,hbd,bgc,hgc,hbc,hbg,bgd,hgd,hbd,hbg
删除3个：gdc,adc,agc,agd,bdc,adc,abc,abd,bgc,agc,abc,abg,bgd,agd,abd,abg
删除3个：hdc,adc,ahc,ahd,hgc,agc,ahc,ahg,hgd,agd,ahd,ahg
删除3个：hbc,abc,ahc,ahb,hbd,abd,ahd,ahb
删除3个：hbg,abg,ahg,ahb

删除3个：dp[1][0].delete1,dp[1][0].delete2,dp[1][0].delete3,dp[1][0].delete4,dp[1][0].delete5
删除3个：dp[1][1].delete2,dp[1][1].delete3,dp[1][1].delete4,dp[1][1].delete5
删除3个：dp[1][2].delete3,dp[1][2].delete4,dp[1][2].delete5
删除3个：dp[1][3].delete4,dp[1][3].delete5
删除3个：dp[1][4].delete5

删除2个：bgdc,hgdc,hbdc,hbgc,hbgd
删除2个：agdc,abdc,abgc,abgd
删除2个：ahdc,ahgc,ahgd
删除2个：ahbc,ahbd
删除2个：ahbg

删除2个：bgdc,hgdc,hbdc,hbgc,hbgd
删除2个：bgdc,agdc,abdc,abgc,abgd
删除2个：hgdc,agdc,ahdc,ahgc,ahgd
删除2个：hbdc,abdc,ahdc,ahbc,ahbd
删除2个：hbgc,abgc,ahgc,ahbc,ahbg
删除2个：hbgd,abgd,ahgd,ahbd,ahbg

num=2
0,1,2,3,4,5 ==> 0000,0001,0010,0011,0100,0101 ==> 0,1,1,2,1,2
dp[i]表示数字i的二进制1的个数
dp[0] = 0;
dp[1] = dp[0] + 1;
dp[2] = dp[1];
dp[n] = dp[n - 1]

y&(y - 1) = 0
y是2的整数次幂
4&3
0100
0011
0000

8&7
1000
0111
0000

16&15
10000
01111
00000

1&0
0001
0000
0000

7&6
0111
0110

0110
0101

0100
0011
0000

状态转移方程：
f(i) = max{f(i−1)+nums[i],nums[i]}
f[i][j] = f[i+1][j]
bits[i]=bits[i−highBit]+1

青蛙跳台阶问题
每次可以跳1或者2阶
跳上n阶的的跳法

确定状态：
f(n)跳上n阶的跳法数

状态转移方程：
f(n) = f(n - 1) + f(n - 2)
f(0) = 0
f(1) = 1
f(2) = 2

13678
f(0) = 1
f(n) = max{f(n-1)+arr[n],arr[n]}
f(1) = max{1+3,3} = 4

[2,7,9,3,1]
135 = 12
14 = 5
15 = 3
24 = 10
25 = 8
35 = 10
135是最优解

定义状态：
f(n)表示以第n次号预约结尾的最长预约时间数
定义边界：
f(0) = arr[0]
f(1) = max{arr[1],arr[0]}
f(n) = max{f(n - 1), f(n - 2) + arr[n]}

f(0) = 2
f(1) = 7
f(2) = max{7, 2 + 9} = 11
f(3) = max{11, 7 + 3} = 11
f(4) = max{11, 11 + 1} = 12
max{f(n)} = 12









