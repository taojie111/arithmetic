利润：price[i] - price[j]   第i天卖出  第j天买入
f(x)表示在第x天卖出时的最大利润
f(x) = f(x - 1) + price[x] - price[x - 1]
边界状态
f(0) = 0
f(1) = 1

删除0个：ahbgdc
删除0个：dp[0][0]

删除1个：hbgdc,abgdc,ahgdc,ahbdc,ahbgc,ahbgd
删除1个：dp[1][0],dp[1][1],dp[1][2],dp[1][3]，dp[1][4]，dp[1][5]
删除1个：dp[0][0].delete1,dp[0][0].delete2,dp[0][0].delete3,dp[0][0].delete4,dp[0][0].delete5,dp[0][0].delete6

删除2个：bgdc,hgdc,hbdc,hbgc,hbgd
删除2个：agdc,abdc,abgc,abgd
删除2个：ahdc,ahgc,ahgd
删除2个：ahbc,ahbd
删除2个：ahbg

删除2个：dp[1][0].delete1,dp[1][0].delete2,dp[1][0].delete3,dp[1][0].delete4,dp[1][0].delete5
删除2个：dp[1][1].delete2,dp[1][1].delete3,dp[1][1].delete4,dp[1][1].delete5
删除2个：dp[1][2].delete3,dp[1][2].delete4,dp[1][2].delete5
删除2个：dp[1][3].delete4,dp[1][3].delete5
删除2个：dp[1][4].delete5

删除2个：dp[2][0],dp[2][1],dp[2][2],dp[2][3],dp[2][4]
删除2个：dp[2][5],dp[2][6],dp[2][7],dp[2][8]
删除2个：dp[2][9],dp[2][10],dp[2][11]
删除2个：dp[2][12],dp[2][13]
删除2个：dp[2][14]

删除3个：gdc,bdc,bgc,bgd,gdc,hdc,hgc,hgd,bdc,hdc,hbc,hbd,bgc,hgc,hbc,hbg,bgd,hgd,hbd,hbg
删除3个：gdc,adc,agc,agd,bdc,adc,abc,abd,bgc,agc,abc,abg,bgd,agd,abd,abg
删除3个：hdc,adc,ahc,ahd,hgc,agc,ahc,ahg,hgd,agd,ahd,ahg
删除3个：hbc,abc,ahc,ahb,hbd,abd,ahd,ahb
删除3个：hbg,abg,ahg,ahb

删除3个：dp[1][0].delete1,dp[1][0].delete2,dp[1][0].delete3,dp[1][0].delete4,dp[1][0].delete5
删除3个：dp[1][1].delete2,dp[1][1].delete3,dp[1][1].delete4,dp[1][1].delete5
删除3个：dp[1][2].delete3,dp[1][2].delete4,dp[1][2].delete5
删除3个：dp[1][3].delete4,dp[1][3].delete5
删除3个：dp[1][4].delete5

删除2个：bgdc,hgdc,hbdc,hbgc,hbgd
删除2个：agdc,abdc,abgc,abgd
删除2个：ahdc,ahgc,ahgd
删除2个：ahbc,ahbd
删除2个：ahbg

删除2个：bgdc,hgdc,hbdc,hbgc,hbgd
删除2个：bgdc,agdc,abdc,abgc,abgd
删除2个：hgdc,agdc,ahdc,ahgc,ahgd
删除2个：hbdc,abdc,ahdc,ahbc,ahbd
删除2个：hbgc,abgc,ahgc,ahbc,ahbg
删除2个：hbgd,abgd,ahgd,ahbd,ahbg

num=2
0,1,2,3,4,5 ==> 0000,0001,0010,0011,0100,0101 ==> 0,1,1,2,1,2
dp[i]表示数字i的二进制1的个数
dp[0] = 0;
dp[1] = dp[0] + 1;
dp[2] = dp[1];
dp[n] = dp[n - 1]

y&(y - 1) = 0
y是2的整数次幂
4&3
0100
0011
0000

8&7
1000
0111
0000

16&15
10000
01111
00000

1&0
0001
0000
0000

7&6
0111
0110

0110
0101

0100
0011
0000

状态转移方程：
f(i) = max{f(i−1)+nums[i],nums[i]}
f[i][j] = f[i+1][j]
bits[i]=bits[i−highBit]+1

青蛙跳台阶问题
每次可以跳1或者2阶
跳上n阶的的跳法

确定状态：
f(n)跳上n阶的跳法数

状态转移方程：
f(n) = f(n - 1) + f(n - 2)
f(0) = 0
f(1) = 1
f(2) = 2

13678
f(0) = 1
f(n) = max{f(n-1)+arr[n],arr[n]}
f(1) = max{1+3,3} = 4

[2,7,9,3,1]
135 = 12
14 = 5
15 = 3
24 = 10
25 = 8
35 = 10
135是最优解

定义状态：
f(n)表示以第n次号预约结尾的最长预约时间数
定义边界：
f(0) = arr[0]
f(1) = max{arr[1],arr[0]}
f(n) = max{f(n - 1), f(n - 2) + arr[n]}

f(0) = 2
f(1) = 7
f(2) = max{7, 2 + 9} = 11
f(3) = max{11, 7 + 3} = 11
f(4) = max{11, 11 + 1} = 12
max{f(n)} = 12

使用最小花费爬楼梯
 0   1   2
[10, 15, 20]
定义状态：
f(x)(y)表示最后一次通过方式y爬到x阶台阶的最小花费,y=1表示最后一次爬1阶到达x，y=2表示最后一次爬2阶到达x

定义边界：
f(0)(1) = 0
f(0)(2) = 0

f(1)(1) = 10
f(1)(2) = 10

f(2)(1) = 15
f(2)(2) = 10

f(3)(1) = 15
f(3)(2) = 10

状态转移方程：
f(x)(y) = max{f(x-2)(2) + arr[x-2],f(x-1)(1) + arr[x-1]}

除数博弈题解（https://leetcode-cn.com/problems/divisor-game/）

选出任一x，满足 0 < x < N 且 N % x == 0 。
用N - x替换黑板上的数字N。

使用动态规划
定义状态：f(x)表示每次执行N-x后的差，即f(x) = f(x-1) - x
x是偶数时，表示爱丽丝执行操作后的数，x是奇数时，表示鲍勃执行操作后的数
确定边界：f(0) = N - x（每次选择的x尽量让对手不能执行下次操作）
10%2=0,8,8%2=0,6%2=0,4%2=0,2%1=0,1
10%5=0

面试题 08.01. 三步问题（https://leetcode-cn.com/problems/three-steps-problem-lcci/）
实现一种方法，计算小孩有多少种上楼梯的方式。
定义状态：f(x)表示到第x阶台阶的方式
确定边界：f(0) = 0,f(1) = 1,f(2) = 2
状态转移方程：f(x) = f(x-3) + f(x - 2) + f(x - 1)

LCP 07. 传递信息(https://leetcode-cn.com/problems/chuan-di-xin-xi/)
输入：n = 5, relation = [[0,2],[2,1],[3,4],[2,3],[1,4],[2,0],[0,4]], k = 3
确定状态：经过k轮传递，信息传到n-1小伙伴处的方案数，f(k)(n-1)

788. 旋转数字(https://leetcode-cn.com/problems/rotated-digits/)
动态规划：
1、确定状态：
f(x)为数字1-x中的好数的数量
2、定义边界
f(0) = 0
f(1) = 0
f(2) = 1
f(3) = 1
3、状态转移方程
2、5、6、9
30+1=31 35+1=36 39+1=40
f(x) = f(x-1) + is(x)

169. 多数元素(https://leetcode-cn.com/problems/majority-element/)
n = 5,[1,4,1,1,5]
n/2=2,result=1

190. 颠倒二进制位（https://leetcode-cn.com/problems/reverse-bits/）
00000010100101000001111010011100
分治法：
子问题最优解：

有效的括号（https://leetcode-cn.com/problems/valid-parentheses/）
[{(){()}}[]]

比特位计数（https://leetcode-cn.com/problems/counting-bits/）
0000    0    0   h=0
0001    1    1   h=1
0010    2    1   h=2
0011    3    2   h=2
0100    4    1   h=4
0101    5    2   h=4
0110    6    2   h=4
0111    7    3   h=4
1000    8    1   h=8
1001    9    2
1010    10   2
10001   17   2
10010   18   2
f(x)判断x是奇数还是偶数:
1、如果是奇数：f(x)=f(x-1) + 1
2、如果是偶数：f(x)=f(x-1)

0000    0    0   h=0
0001    1    1   h=1
0010    2    1   h=2
0011    3    2   h=2
0100    4    1   h=4
0101    5    2   h=4
0110    6    2   h=4
0111    7    3   h=4

子集（https://leetcode-cn.com/problems/subsets/）
0 - 1
1 - 2
2 - 4
3 - 8
[1,2]--[],[1],[2],[1,2]
(mask & (1 << i)) != 0
1 << i
i = 0 -> 0001
i = 1 -> 0010
i = 2 -> 0100

&
0000
0001
0000

0000
0010
0000

0000
0100
0000

0001
0100
0000

括号生成（https://leetcode-cn.com/problems/generate-parentheses/）
(()()) (())()  (()()) ((())) ()(()) ((())) ()()() )(()()

({()}{()}{()}{()})
((()))
())(()
()(())
       ((           ()
  (((     (()      ()(
((()))
(()()) (())() ((())) ()(()) ()()()

旋转图像（https://leetcode-cn.com/problems/rotate-image/）
1  matrix[0][0] -> matrix[0][2]
4  matrix[1][0] -> matrix[0][1]
7  matrix[2][0] -> matrix[0][0]
2  matrix[0][1] -> matrix[1][2]
5  matrix[1][1] -> matrix[1][1]
8  matrix[2][1] -> matrix[1][0]
3  matrix[1][3] -> matrix[3][3]
6  matrix[2][3] -> matrix[3][2]
9  matrix[3][3] -> matrix[3][1]
行 = 原来列
列 = n-原来行+1
temp=matrix[row][col]
matrix[row][col]=matrix[n−col−1][row]
matrix[n−col−1][row]=matrix[n−row−1][n−col−1]
matrix[n−row−1][n−col−1]=matrix[col][n−row−1]
matrix[col][n−row−1]=temp
n=3
matrix[0][0]
matrix[0][2]
matrix[2][2]
matrix[2][0]
matrix[0][2]
matrix[0][0]
matrix[0][3]
matrix[0][3]

不同的二叉搜索树（https://leetcode-cn.com/problems/unique-binary-search-trees/）
n=3， 1,2,3

f(x)表示n=x时，二叉搜索树的数量
f(0)=0
f(1)=1
f(2)=2
f(x)=2f(x-1)+1

最小路径和（https://leetcode-cn.com/problems/minimum-path-sum/）
起点：0,0  终点：2,2
i/3,1%3
0 -> 0+1 0+3
3 -> 3+1 3+3
6 -> 6+1 6+3
2 -> 2/3=0 2%3=2
0 -> 0/3=0 0%3=0 向右移动：0,0+1，向下移动：0+1,0 （0+1<n, 0+1<m）
2 -> 2/3=0 2%3=2 向右移动：0,2+1，向下移动：0+1,2 （2+1<n, 0+1<m）

二叉树的最近公共祖先（https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/）
int pre = (index - 1) / 2

回文子串（https://leetcode-cn.com/problems/palindromic-substrings/）
abcac
aba  a^b^a=b     a&b&a=a&b
abba a^b^b^a=0   a&b&b&a=a&b

盛最多水的容器（https://leetcode-cn.com/problems/container-with-most-water/）
x 1~9
y 1~8
(i,ai),(i,0)
2,8 9,7
x2-x1 尽可能大
y 尽可能大

状态：x,y
选择：x:1~9,y:1~8
最优子结构：
x=2-x1
y=min(y1,y2)
f(x,y) = x*y
f(x2,x1) = (x2-x1) * min(arr(x1), arr(x2))
for (int x1 = 1, x1 <= length, x1++) {
    for (int x2 = x1 + 1, x2 <= length, x2++) {
        dp[x1][x2] = (x2-x1) * min(arr(x1), arr(x2))
    }
}

完全平方数（https://leetcode-cn.com/problems/perfect-squares/）
n=50
1  0001
4  0010
9  1001
16 10000
25 11001
36 100100
49 110001
n=1,f(n) = 1 1;
n=2,f(n) = 2 11;
n=3,f(n) = 3 111;
n=4,f(n) = 1 2;
n=5,f(n) = 2 21;
n=6,f(n) = 3 211;
n=7,f(n) = 4 2111;
n=8,f(n) = 2 22;
n=9,f(n) = 1 3;
n=10,f(n) = 2 31;
n=11,f(n) = 3 311;
n=12,f(n) = 4 3111;
n=13,f(n) = 2 32;
n=14,f(n) = 3 321;
n=15,f(n) = 4 3211;
n=16,f(n) = 1 4;
n=17,f(n) = 2 41;
n=18,f(n) = 3 411;
n=19,f(n) = 4 4111;
n=20,f(n) = 2 42;
n=21,f(n) = 3 421;
n=22,f(n) = 4 4211;
n=23,f(n) = 5 42111;
n=24,f(n) = 3 422;
n=25,f(n) = 1 5;
1 4 9 16 25
13
13-9=4
4-4=0
26
32
32-25=7
7-4=3
3-1
3-1
3-1

打家劫舍III（https://leetcode-cn.com/problems/house-robber-iii/）
状态：房屋索引、房屋是否被打劫
选择：房屋、是否打劫房屋
状态转移方程：f(x) = f()

最长连续序列（https://leetcode-cn.com/problems/longest-consecutive-sequence/）
y-x=1

打家劫舍（https://leetcode-cn.com/problems/house-robber/）
状态：房屋数量
选择：房间号
方程：f(x)为偷盗的最大金额，f(x) = max{f(x - 1), f(x - 2) + arr[x]}
初始值：f(0) = 0; f(1) = arr[1]; f(2) = max{arr[2], arr[1]}

目标和（https://leetcode-cn.com/problems/target-sum/）
1,1,1,1,1
状态：数组每个元素为正或者负两种状态（+，-）
选择：元素
f(x)(y)含义：数组前x个元素中，当第x个元素的值为状态y（+，-）时，组合的和等于目标值的数量
0表示+，1表示-
初始值：f(0)(0) = 0,f(0)(1) = 0
f(x)(y) = f(x)(y)

零钱兑换(https://leetcode-cn.com/problems/coin-change/)
状态：目标金额
选择：硬币
转移方程：f(x)

跳跃游戏(https://leetcode-cn.com/problems/jump-game/)
状态：数组索引
选择：数组元素(index < x)
转移方程：f(x)=f(x-1)


